{"ast":null,"code":"var _jsxFileName = \"/home/senzo/VS Code/quicksort_practice/src/PracticeSelect.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuickSort = () => {\n  _s();\n  const [inputArray, setInputArray] = useState(\"\");\n  const [sortedArray, setSortedArray] = useState([]);\n  const [pivot, setPivot] = useState(null);\n  const generateRandomArray = (length, max) => {\n    let randomArray = [];\n    for (let i = 0; i < length; i++) {\n      randomArray.push(Math.floor(Math.random() * max) + 1);\n    }\n    setInputArray(randomArray.join(\",\"));\n  };\n  const handleInputChange = e => {\n    setInputArray(e.target.value);\n  };\n  const sortArray = () => {\n    const arr = inputArray.split(\",\").map(item => parseInt(item));\n    quickSort(arr, 0, arr.length - 1);\n    setSortedArray(arr);\n  };\n  const quickSort = (arr, left, right) => {\n    if (left < right) {\n      let pivotIndex = getPivotIndex(arr, left, right);\n      let partitionIndex = partition(arr, left, right, pivotIndex);\n      quickSort(arr, left, partitionIndex - 1);\n      quickSort(arr, partitionIndex + 1, right);\n    }\n  };\n  const getPivotIndex = (arr, left, right) => {\n    const a = arr[left];\n    const b = arr[right];\n    const mid = Math.floor((left + right) / 2);\n    const c = arr[mid];\n    const median = [a, b, c].sort((x, y) => x - y)[1];\n    setPivot(median);\n    if (median === a) return left;else if (median === b) return right;else return mid;\n  };\n  const partition = (arr, left, right, pivotIndex) => {\n    const pivotValue = arr[pivotIndex];\n    swap(arr, pivotIndex, right);\n    let storeIndex = left;\n    for (let i = left; i < right; i++) {\n      if (arr[i] < pivotValue) {\n        swap(arr, i, storeIndex);\n        storeIndex++;\n      }\n    }\n    swap(arr, storeIndex, right);\n    return storeIndex;\n  };\n  const swap = (arr, i, j) => {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"QuickSort with Median of Three Pivot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => generateRandomArray(10, 100),\n        children: \"Generate Random Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \"npm ERR! Missing script: \\\"start\\\"\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputArray,\n        onChange: handleInputChange,\n        placeholder: \"Enter comma-separated numbers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sortArray,\n        children: \"Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), pivot !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Chosen pivot: \", pivot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Sorted Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sortedArray.join(\", \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(QuickSort, \"BqzZQXNTPzHSx7/Pk+OFY/c+CXI=\");\n_c = QuickSort;\nexport default QuickSort;\nvar _c;\n$RefreshReg$(_c, \"QuickSort\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","QuickSort","_s","inputArray","setInputArray","sortedArray","setSortedArray","pivot","setPivot","generateRandomArray","length","max","randomArray","i","push","Math","floor","random","join","handleInputChange","e","target","value","sortArray","arr","split","map","item","parseInt","quickSort","left","right","pivotIndex","getPivotIndex","partitionIndex","partition","a","b","mid","c","median","sort","x","y","pivotValue","swap","storeIndex","j","temp","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["/home/senzo/VS Code/quicksort_practice/src/PracticeSelect.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst QuickSort = () => {\n  const [inputArray, setInputArray] = useState(\"\");\n  const [sortedArray, setSortedArray] = useState([]);\n  const [pivot, setPivot] = useState(null);\n\n  const generateRandomArray = (length, max) => {\n    let randomArray = [];\n    for (let i = 0; i < length; i++) {\n      randomArray.push(Math.floor(Math.random() * max) + 1);\n    }\n    setInputArray(randomArray.join(\",\"));\n  };\n\n  const handleInputChange = (e) => {\n    setInputArray(e.target.value);\n  };\n\n  const sortArray = () => {\n    const arr = inputArray.split(\",\").map((item) => parseInt(item));\n    quickSort(arr, 0, arr.length - 1);\n    setSortedArray(arr);\n  };\n\n  const quickSort = (arr, left, right) => {\n    if (left < right) {\n      let pivotIndex = getPivotIndex(arr, left, right);\n      let partitionIndex = partition(arr, left, right, pivotIndex);\n\n      quickSort(arr, left, partitionIndex - 1);\n      quickSort(arr, partitionIndex + 1, right);\n    }\n  };\n\n  const getPivotIndex = (arr, left, right) => {\n    const a = arr[left];\n    const b = arr[right];\n    const mid = Math.floor((left + right) / 2);\n    const c = arr[mid];\n\n    const median = [a, b, c].sort((x, y) => x - y)[1];\n    setPivot(median);\n\n    if (median === a) return left;\n    else if (median === b) return right;\n    else return mid;\n  };\n\n  const partition = (arr, left, right, pivotIndex) => {\n    const pivotValue = arr[pivotIndex];\n    swap(arr, pivotIndex, right);\n\n    let storeIndex = left;\n\n    for (let i = left; i < right; i++) {\n      if (arr[i] < pivotValue) {\n        swap(arr, i, storeIndex);\n        storeIndex++;\n      }\n    }\n\n    swap(arr, storeIndex, right);\n    return storeIndex;\n  };\n\n  const swap = (arr, i, j) => {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  };\n\n  return (\n    <div>\n      <h2>QuickSort with Median of Three Pivot</h2>\n      <div>\n        <button onClick={() => generateRandomArray(10, 100)}>\n          Generate Random Array\n        </button>npm ERR! Missing script: \"start\"\n        <input\n          type=\"text\"\n          value={inputArray}\n          onChange={handleInputChange}\n          placeholder=\"Enter comma-separated numbers\"\n        />\n        <button onClick={sortArray}>Sort</button>\n      </div>\n      {pivot !== null && <p>Chosen pivot: {pivot}</p>}\n      <div>\n        <h3>Sorted Array</h3>\n        <p>{sortedArray.join(\", \")}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickSort;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}